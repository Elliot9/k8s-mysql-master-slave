apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      name: mysql
  replicas: 2
  serviceName: mysql
  template:
    metadata:
      labels:
        name: mysql
    spec:
      securityContext:
        fsGroup: 0
      initContainers:
        - name: init-mysql
          image: mysql:8.0
          command:
            - sh
            - -c
            - |
              # 設置 sh 腳本遇到錯誤時會退出並顯示命令的執行過程，方便調試。
              set -ex 
              # 從 pod 的 ordinal index 生成 mysql server-id。
              # hostname 會返回當前 Pod 的名稱, 使用 hostname 的正則表達式匹配出 -([0-9]+)$ 中的數字，並賦值給 ordinal。
              # 當正則表達式匹配成功時, Bash 會將匹配的結果存儲在一個名為 BASH_REMATCH 的數組中。BASH_REMATCH[1] 代表第一個捕獲組（即 ([0-9]+) 中的數字部分）
              echo "Current HOSTNAME: $HOSTNAME"
              [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              # 新增一個名為 server-id.cnf 的 MySQL 配置文件，第一行寫入 [mysqld] 來表示這是 MySQL 服務器的配置
              echo [mysqld] > /mnt/conf.d/server-id.cnf
              # 將 server-id 設置為 100 加上 ordinal, 避免與默認的 server-id=0 衝突
              # 加上 100 而不是 1 是因為防止 cluster 中有多個 mysql 節點時, server-id 重複
              echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
              # 從 config-map 中複製 master.cnf 或 slave.cnf 到 emptyDir
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/config-map/master.cnf /mnt/conf.d/
              else
                cp /mnt/config-map/slave.cnf /mnt/conf.d/
              fi
          volumeMounts:
            - mountPath: /mnt/conf.d
              name: confd #臨時卷、emptyDir
            - mountPath: /mnt/config-map
              name: config-map
        - name: clone-mysql
          image: percona/percona-xtrabackup:8.0
          command:
            - bash
            - "-c"
            - |
              set -ex
              # 如果 /var/lib/mysql/mysql 目錄存在，則表示已經初始化過，直接退出
              [[ -d /var/lib/mysql/mysql ]] && exit 0
              # 使用正則表達式匹配出 hostname 中的 -([0-9]+)$ 中的數字，並賦值給 ordinal
              echo "Current HOSTNAME: $HOSTNAME"
              [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              # 如果 ordinal 為 0, 表示是 master 節點，直接退出
              [[ $ordinal -eq 0 ]] && exit 0
              # 從前一個 MySQL 節點複製所有數據到當前節點, 使用 ncat 工具接收數據, 使用 xbstream 工具解壓接收到的數據流,並將其存儲到 /var/lib/mysql 目錄
              socat TCP:mysql-$(($ordinal-1)).mysql:3307 STDOUT | xbstream -x -C /var/lib/mysql
              # 準備數據, 將接收到的數據流解壓並準備數據庫
              xtrabackup --prepare --target-dir=/var/lib/mysql
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-data
              subPath: mysql
            - mountPath: /etc/mysql/conf.d
              name: confd
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "1"
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_DATABASE
              value: dev
            - name: MYSQL_ROOT_HOST
              value: '%'
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-data
              subPath: mysql
            - mountPath: /etc/mysql/conf.d
              name: confd
          # resources: #资源限制
          #   requests:
          #     cpu: 500m
          #     memory: 1Gi
          # livenessProbe: #存活探针
          #   exec:
          #     command: ["mysqladmin", "ping"]
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          #   timeoutSeconds: 5
          # readinessProbe: #就绪探针
          #   exec:
          #   # Check we can execute queries over TCP (skip-networking is off).
          #   command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          #   initialDelaySeconds: 5
          #   periodSeconds: 2
          #   timeoutSeconds: 1
        - name: xtrabackup
          image: percona/percona-xtrabackup:8.0
          ports:
            - containerPort: 3307
          command:
            - bash
            - "-c"
            - |
              set -ex
              cd /var/lib/mysql

              # Determine binlog position of cloned data, if any.
              if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
                # XtraBackup already generated a partial "CHANGE MASTER TO" query
                # because we're cloning from an existing slave. (Need to remove the tailing semicolon!)
                cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
                # Ignore xtrabackup_binlog_info in this case (it's useless).
                rm -f xtrabackup_slave_info xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
                # We're cloning directly from master. Parse binlog position.
                MASTER_LOG_FILE=$(awk '{print $1}' xtrabackup_binlog_info)
                MASTER_LOG_POS=$(awk '{print $2}' xtrabackup_binlog_info)
                
                # Validate that MASTER_LOG_FILE and MASTER_LOG_POS are correctly parsed
                if [[ ! "$MASTER_LOG_FILE" =~ ^mysql-bin\.[0-9]{6}$ ]]; then
                  echo "Invalid MASTER_LOG_FILE format: $MASTER_LOG_FILE" >&2
                  exit 1
                fi

                rm -f xtrabackup_binlog_info xtrabackup_slave_info
                echo "CHANGE MASTER TO MASTER_LOG_FILE='${MASTER_LOG_FILE}',\
                      MASTER_LOG_POS=${MASTER_LOG_POS}" > change_master_to.sql.in
              fi

              # Check if we need to complete a clone by starting replication.
              if [[ -f change_master_to.sql.in ]]; then
                echo "Waiting for mysqld to be ready (accepting connections)"
                until mysql -h 127.0.0.1 --user=root --password=root -e "SELECT 1"; do sleep 1; done
  
                echo "Initializing replication from clone position"
                # 正確提取 MASTER_LOG_FILE
                MASTER_LOG_FILE=$(grep MASTER_LOG_FILE change_master_to.sql.in | awk -F"'" '{print $2}')
                
                # 正確提取並清理 MASTER_LOG_POS，移除不必要的單引號和逗號
                MASTER_LOG_POS=$(grep MASTER_LOG_POS change_master_to.sql.in | awk -F'=' '{print $2}' | sed 's/[^0-9]*//g')
                
                # Check the parsed values to ensure they're correct
                echo "Parsed MASTER_LOG_FILE: $MASTER_LOG_FILE"
                echo "Parsed MASTER_LOG_POS: $MASTER_LOG_POS" 

                # Execute CHANGE MASTER and START SLAVE
                # 需要 RESET SLAVE 才能防止讀取冷備份時的 relay log 錯誤
                mysql -h 127.0.0.1 -uroot -proot <<EOF
                CHANGE MASTER TO
                MASTER_HOST='mysql-0.mysql',
                MASTER_USER='root',
                MASTER_PASSWORD='root',
                MASTER_LOG_FILE='$MASTER_LOG_FILE',
                MASTER_LOG_POS=$MASTER_LOG_POS,
                MASTER_SSL=1,
                MASTER_SSL_VERIFY_SERVER_CERT=0,
                MASTER_CONNECT_RETRY=10;
                STOP SLAVE;
                RESET SLAVE;
                START SLAVE;
              EOF
              fi      
              
              # Start a server to send backups when requested by peers.
              exec socat TCP-LISTEN:3307,reuseaddr,fork EXEC:"xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=root"
              # socat TCP-LISTEN:3307,fork EXEC:"xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=root"
              
              # Start a server to send backups when requested by peers. #监听在3307端口，用于为下一个pod同步全量数据
              # nc -l -p 3307 -c \
              # xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root
              # ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
              # "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
          volumeMounts:
            - mountPath: /var/lib/mysql
              subPath: mysql # 只將持久卷中名為 "mysql" 的子目錄掛載到容器的指定路徑
              name: mysql-data
            - mountPath: /etc/mysql/conf.d
              name: confd
          securityContext:
            runAsUser: 0
            runAsGroup: 0
      volumes:
        - name: confd
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql-config
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        storageClassName: manual
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 20Gi
  